pipeline {
    agent any

    options {
        timestamps()              // üïí Muestra hora en cada l√≠nea del log
        ansiColor('xterm')        // üé® Permite colores en consola
    }

    stages {
        stage('Clonar c√≥digo') {
            steps {
                echo "\u001B[34müì• Clonando repositorio desde GitHub...\u001B[0m"
                git branch: 'main', url: 'https://github.com/BigKun87/laboratorios.git'
            }
            post {
                success {
                    echo "\u001B[32m‚úÖ C√≥digo clonado exitosamente\u001B[0m"
                }
                failure {
                    echo "\u001B[31m‚ùå Error al clonar el repositorio\u001B[0m"
                }
            }
        }

        stage('Verificar Docker') {
            steps {
                echo "\u001B[36müîç Verificando instalaci√≥n de Docker...\u001B[0m"
                sh 'docker --version'
                sh 'docker ps -a'
            }
            post {
                success {
                    echo "\u001B[32m‚úÖ Docker est√° funcionando correctamente\u001B[0m"
                }
                failure {
                    echo "\u001B[31m‚ùå Docker no est√° disponible o hay errores\u001B[0m"
                }
            }
        }

        stage('Ejecutar contenedor') {
            steps {
                echo "\u001B[35müöÄ Ejecutando contenedor Alpine...\u001B[0m"
                sh 'docker run --rm alpine echo "Hola desde Docker en Jenkins"'
            }
            post {
                success {
                    echo "\u001B[32m‚úÖ Contenedor ejecutado correctamente\u001B[0m"
                }
                failure {
                    echo "\u001B[31m‚ùå Fall√≥ la ejecuci√≥n del contenedor\u001B[0m"
                }
            }
        }
    }
    /*TEST3*/
}
